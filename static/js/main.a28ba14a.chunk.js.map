{"version":3,"sources":["Point.tsx","fitcurve.tsx","Draw.tsx","hooks.tsx","GridCanvas.tsx","PlotCanvas.tsx","Modal.tsx","Graph.tsx","App.tsx","index.tsx"],"names":["distance","a","b","dx","x","dy","y","Math","sqrt","pointToString","p","computeControlPoints","knots","cp1","cp2","n","length","c","r","i","m","weight","p1","p2","dist","computeControlPointsCycle","weights","frac_i","W","slice","K","pow","r_in","a_in","b_in","c_in","lc","Array","lr","thomasCycle","radius","connectPts","ctx","points","cycle","minor","cur","first","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","drawBezier","start","end","bezierCurveTo","drawQuadratic","cp","quadraticCurveTo","piecewiseCubicBezier","drawHandles","left","drawLine","type","push","numSegments","xCPs","map","yCPs","cubicCPs","fitCurveCycle","fitCurve","useCanvasRefs","useState","setCtx","useCallback","canvas","getContext","getIncrements","viewport","width","height","inc","minTicks","span","log","log10","pow10","floor","div","getIncrement","max","extent","worldIncrements","deviceIncrements","xOffset","abs","min","yOffset","worldStarts","deviceStarts","formatNumber","round","toString","drawAxisLabel","label","offsetX","measureText","fillStyle","fillRect","fillText","GridCanvas","props","canvasRef","increments","useEffect","data","clearRect","textBaseline","textAlign","font","labelY","halfInc","strokeRect","labelX","drawGraph","ref","className","PlotCanvas","lineType","isCycle","forEach","point","index","style","activePoint","location","arc","PI","fill","drawPoint","Modal","showHideClassName","show","title","children","onClick","handleClose","scaleViewport","v","ratio","newXExtent","newYExtent","newXMin","newYMin","exportString","str","Graph","windowX","windowY","undefined","setActivePoint","ptrDown","setPtrDown","worldPoints","setWorldPoints","devicePoints","setDevicePoints","ratioX","ratioY","xMin","xMax","yMin","yMax","getRegularViewport","setViewport","lineStyle","setLineStyle","setIsCycle","showExport","setShowExport","showImport","setShowImport","toWorld","toDevice","tabIndex","onPointerDown","e","clicked","clientX","clientY","newActivePoint","loc","onPointerMove","preventDefault","xRatio","movementX","yRatio","movementY","clickedPoint","newWorld","onPointerUp","onDoubleClick","newDevicePoint","onWheel","deltaY","onKeyDown","key","splice","onBlur","id","onChange","target","value","checked","htmlFor","readOnly","resize","importStr","document","getElementById","startList","replace","split","Number","parseFloat","reduce","acc","curr","importFromString","App","renderApp","ReactDOM","render","window","innerWidth","innerHeight","addEventListener"],"mappings":"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","file":"static/js/main.a28ba14a.chunk.js","sourcesContent":["export interface Point {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport function distance(a: Point, b: Point) : number {\r\n    const dx = b.x - a.x;\r\n    const dy = b.y - a.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\n// AKA lerp or linear interpolate\r\nexport function mix(a: Point, b: Point, ratio: number) : Point {\r\n    if(ratio <= 0.0) return a;\r\n    if(ratio >= 1.0) return b;\r\n\r\n    const bRatio = 1.0 - ratio;\r\n    const mixedX = a.x * ratio + b.x * bRatio;\r\n    const mixedY = a.y * ratio + b.y * bRatio;\r\n    return {x: mixedX, y: mixedY};\r\n}\r\n\r\nexport function pointToString(p : Point) {\r\n    return '(' + p.x + ', ' + p.y + ')';\r\n}\r\n","import {Point, distance} from \"./Point\";\r\n\r\n// Algorithm from an excellent post by Lubos Brieda: https://www.particleincell.com/2012/bezier-splines/\r\n// Uses Thomas's Algorithm to compute control points from an array of knots.\r\n// Using each pair of knots as endpoints, generates cubic bezier control points\r\n// Must be performed on X and Y separately!\r\nfunction computeControlPoints(knots: number[]): { cp1: number[], cp2: number[] } {\r\n    // Control point lists.\r\n    // After running, beziers from {knots[i], cp1[i], cp2[i], knots[i + 1]} will form a smooth curve.\r\n    const cp1: number[] = [];\r\n    const cp2: number[] = [];\r\n    const n = knots.length - 1;\r\n\r\n    // rhs vector\r\n    const a: number[] = [];\r\n    const b: number[] = [];\r\n    const c: number[] = [];\r\n    const r: number[] = [];\r\n\r\n    // left most segment\r\n    a[0] = 0;\r\n    b[0] = 2;\r\n    c[0] = 1;\r\n    r[0] = knots[0] + 2 * knots[1];\r\n\r\n    // internal segments\r\n    for (let i = 1; i < n - 1; i++) {\r\n        a[i] = 1;\r\n        b[i] = 4;\r\n        c[i] = 1;\r\n        r[i] = 4 * knots[i] + 2 * knots[i + 1];\r\n    }\r\n\r\n    // right segment\r\n    a[n - 1] = 2;\r\n    b[n - 1] = 7;\r\n    c[n - 1] = 0;\r\n    r[n - 1] = 8 * knots[n - 1] + knots[n];\r\n\r\n    // Solves Ax=b with the Thomas algorithm (from Wikipedia)\r\n    for (let i = 1; i < n; i++) {\r\n        const m = a[i] / b[i - 1];\r\n        b[i] = b[i] - m * c[i - 1];\r\n        r[i] = r[i] - m * r[i - 1];\r\n    }\r\n\r\n    cp1[n - 1] = r[n - 1] / b[n - 1];\r\n    for (let i = n - 2; i >= 0; --i) {\r\n        cp1[i] = (r[i] - c[i] * cp1[i + 1]) / b[i];\r\n    }\r\n\r\n    // We have p1, now compute p2\r\n    for (let i = 0; i < n - 1; i++) {\r\n        cp2[i] = 2 * knots[i + 1] - cp1[i + 1];\r\n    }\r\n\r\n    cp2[n - 1] = 0.5 * (knots[n] + cp1[n - 1]);\r\n\r\n    return {cp1, cp2};\r\n}\r\n\r\n// Generates Bezier curves that smoothly connect a set of points\r\n// This version is for an open curve (the endpoints are not connected)\r\nexport function fitCurve(points: Point[]): Point[] {\r\n    if (points.length < 3) return points;\r\n\r\n    const xCPs = computeControlPoints(points.map(p => p.x));\r\n    const yCPs = computeControlPoints(points.map(p => p.y));\r\n\r\n    const cubicCPs: Point[] = [points[0]];\r\n    for (let i = 0; i < points.length - 1; i++) {\r\n        cubicCPs.push({x: xCPs.cp1[i], y: yCPs.cp1[i]});\r\n        cubicCPs.push({x: xCPs.cp2[i], y: yCPs.cp2[i]});\r\n        cubicCPs.push(points[i + 1]);\r\n    }\r\n\r\n    return cubicCPs;\r\n}\r\n\r\n// If the endpoints of the curve are near to each other, the control points should be too (creates a smoother curve)\r\nfunction weight(p1: Point, p2: Point): number {\r\n    const minWeight = 0.00001;\r\n    const dist = distance(p1, p2);\r\n    return dist < minWeight ? minWeight : dist;\r\n}\r\n\r\n// Solves Ax = r by Gaussian elimination, or so I'm told\r\n// Source: Lubos Brieda and Jaco Stuifbergen\r\n// http://www.jacos.nl/jacos_html/spline/circular/\r\nfunction thomasCycle(r_in: number[], a_in: number[], b_in: number[], c_in: number[]) {\r\n    let i: number, m: number;\r\n    const r = r_in.slice();\r\n    const a = a_in.slice();\r\n    const b = b_in.slice();\r\n    const c = c_in.slice();\r\n    const n = r.length;\r\n\r\n    // last column of matrix\r\n    const lc = new Array(n);\r\n    lc[0] = a[0];\r\n\r\n    // last row\r\n    let lr = c[n - 1];\r\n\r\n    for (i = 0; i < n - 3; i++) {\r\n        m = a[i + 1] / b[i];\r\n        b[i + 1] -= m * c[i];\r\n        r[i + 1] -= m * r[i];\r\n        lc[i + 1] = -m * lc[i];\r\n\r\n        m = lr / b[i];\r\n        b[n - 1] -= m * lc[i];\r\n        lr = -m * c[i];\r\n        r[n - 1] -= m * r[i]\r\n    }\r\n\r\n    m = a[i + 1] / b[i];\r\n    b[i + 1] -= m * c[i];\r\n    r[i + 1] -= m * r[i];\r\n    c[i + 1] -= m * lc[i];\r\n    m = lr / b[i];\r\n    b[n - 1] -= m * lc[i];\r\n    a[n - 1] -= m * c[i];\r\n    r[n - 1] = r[n - 1] - m * r[i];\r\n    i = n - 2;\r\n\r\n    m = a[i + 1] / b[i];\r\n    b[i + 1] -= m * c[i];\r\n    r[i + 1] -= m * r[i];\r\n\r\n    // Our return array, a vector\r\n    const x = new Array(n);\r\n\r\n    x[n - 1] = r[n - 1] / b[n - 1];\r\n    lc[n - 2] = 0;\r\n    for (i = n - 2; i >= 0; --i) {\r\n        x[i] = (r[i] - c[i] * x[i + 1] - lc[i] * x[n - 1]) / b[i];\r\n    }\r\n\r\n    return x;\r\n}\r\n\r\n// Compute cubic bezier control points between desired knots of a spline\r\n// Source: Lubos Brieda and Jaco Stuifbergen\r\n// http://www.jacos.nl/jacos_html/spline/circular/\r\nfunction computeControlPointsCycle(knots: number[], weights: number[]): { cp1: number[], cp2: number[] } {\r\n    let W = weights.slice();\r\n    let K = knots.slice();\r\n\r\n    const n = K.length;\r\n    let frac_i: number;\r\n\r\n    // rhs vector\r\n    const a: number [] = [];\r\n    const b: number [] = [];\r\n    const c: number [] = [];\r\n    const r: number [] = [];\r\n\r\n    // populate internal segments\r\n    W[-1] = W[n - 1];\r\n    W[n] = W[0];\r\n    K[n] = K[0];\r\n    for (let i = 0; i < n; i++) {\r\n        frac_i = W[i] / W[i + 1];\r\n        a[i] = W[i] * W[i];\r\n        b[i] = 2 * W[i - 1] * (W[i - 1] + W[i]);\r\n        c[i] = W[i - 1] * W[i - 1] * frac_i;\r\n        r[i] = Math.pow(W[i - 1] + W[i], 2) * K[i] + Math.pow(W[i - 1], 2) * (1 + frac_i) * K[i + 1];\r\n\r\n    }\r\n    const cp1: number[] = thomasCycle(r, a, b, c);\r\n    const cp2: number[] = [];\r\n\r\n    //we have p1, now compute p2\r\n    cp1[n] = cp1[0];\r\n    for (let i = 0; i < n; i++) {\r\n        cp2[i] = K[i + 1] * (1 + W[i] / W[i + 1]) - cp1[i + 1] * (W[i] / W[i + 1]);\r\n    }\r\n\r\n    return {cp1, cp2};\r\n}\r\n\r\n// This generates smooth bezier curves between a set of points, including start and end points\r\nexport function fitCurveCycle(points: Point[]): Point[] {\r\n    if (points.length < 3) return points;\r\n\r\n    const numSegments = points.length - 1;\r\n    const weights: number[] = [];\r\n    for (let i = 0; i < numSegments; i++) {\r\n        weights.push(weight(points[i], points[i + 1]));\r\n    }\r\n    weights.push(weight(points[0], points[numSegments]));\r\n\r\n    const xCPs = computeControlPointsCycle(points.map(p => p.x), weights);\r\n    const yCPs = computeControlPointsCycle(points.map(p => p.y), weights);\r\n\r\n    const cubicCPs: Point[] = [points[0]];\r\n    for (let i = 0; i < points.length; i++) {\r\n        cubicCPs.push({x: xCPs.cp1[i], y: yCPs.cp1[i]});\r\n        cubicCPs.push({x: xCPs.cp2[i], y: yCPs.cp2[i]});\r\n        cubicCPs.push(i === numSegments ? points[0] : points[i + 1]);\r\n    }\r\n\r\n    return cubicCPs;\r\n}","import {Point} from './Point';\r\nimport {LineStyle} from \"./types\";\r\nimport {fitCurve, fitCurveCycle} from \"./fitcurve\";\r\n\r\nexport const radius: number = 8;\r\n\r\nexport function drawPoint(ctx: CanvasRenderingContext2D, location: Point, style: string) {\r\n    ctx.fillStyle = style;\r\n    ctx.beginPath();\r\n    ctx.arc(location.x, location.y, radius, 0, Math.PI * 2);\r\n    ctx.fill();\r\n}\r\n\r\n// Minor lines are used for handles etc\r\nfunction connectPts(ctx: CanvasRenderingContext2D, points: Point[], cycle: boolean, minor: boolean) {\r\n    if (points.length < 2) return;\r\n\r\n    const first = points[0];\r\n    let cur;\r\n\r\n    ctx.beginPath();\r\n    if (minor) {\r\n        ctx.strokeStyle = 'gray';\r\n        ctx.lineWidth = 0.5;\r\n    }\r\n\r\n    ctx.moveTo(first.x, first.y);\r\n    for (let i = 1; i < points.length; i++) {\r\n        cur = points[i];\r\n        ctx.lineTo(cur.x, cur.y);\r\n    }\r\n\r\n    if (cycle) ctx.lineTo(first.x, first.y);\r\n\r\n    ctx.stroke();\r\n    if (minor) {\r\n        ctx.strokeStyle = 'black';\r\n        ctx.lineWidth = 1;\r\n    }\r\n}\r\n\r\nfunction drawBezier(ctx: CanvasRenderingContext2D, start: Point, cp1: Point, cp2: Point, end: Point) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(start.x, start.y);\r\n    ctx.bezierCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, end.x, end.y);\r\n    ctx.stroke();\r\n}\r\n\r\nfunction drawQuadratic(ctx: CanvasRenderingContext2D, start: Point, cp: Point, end: Point) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(start.x, start.y);\r\n    ctx.quadraticCurveTo(cp.x, cp.y, end.x, end.y);\r\n    ctx.stroke();\r\n}\r\n\r\nfunction piecewiseCubicBezier(ctx: CanvasRenderingContext2D, points: Point[], drawHandles: boolean) {\r\n    for (let i = 0; i < points.length;) {\r\n        const left = points.length - i;\r\n        const start: Point = points[i];\r\n        if (left >= 4) {\r\n            const cp1 = points[i + 1];\r\n            const cp2 = points[i + 2];\r\n            const end = points[i + 3];\r\n            if(drawHandles) connectPts(ctx, [start, cp1, cp2, end], false, true);\r\n            drawBezier(ctx, start, cp1, cp2, end);\r\n            i += 3;\r\n        } else if (left === 3) {\r\n            const cp = points[i + 1];\r\n            const end = points[i + 2];\r\n            if(drawHandles) connectPts(ctx, [start, cp, end], false, true);\r\n            drawQuadratic(ctx, start, cp, end);\r\n            i += 2;\r\n        } else if (left === 2) {\r\n            const end = points[i + 1];\r\n            connectPts(ctx, [start, end], false, false);\r\n            i++;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function drawLine(ctx: CanvasRenderingContext2D, points: Point[], type: LineStyle, cycle: boolean) {\r\n    if(cycle && type !== 'spline') {\r\n        points = points.slice();\r\n        points.push(points[0]);\r\n    }\r\n\r\n    switch (type) {\r\n        case 'spline':\r\n            const cps = cycle ? fitCurveCycle(points) : fitCurve(points);\r\n            piecewiseCubicBezier(ctx, cps, false);\r\n            break;\r\n        case 'bezier':\r\n            piecewiseCubicBezier(ctx, points, true) ;\r\n            break;\r\n        case 'line':\r\n            connectPts(ctx, points, false, false);\r\n            break;\r\n        default: // Do nothing with plot types\r\n            break;\r\n    }\r\n}\r\n\r\n\r\n","import {useCallback, useState} from \"react\";\r\n\r\nexport type CanvasRefs = [CanvasRenderingContext2D | null, (canvas: HTMLCanvasElement) => void];\r\n\r\n// We use a callback hook to store the context as state\r\n// This avoids calling ref.getContext every time we update the canvas\r\nexport function useCanvasRefs(): CanvasRefs {\r\n    const [ctx, setCtx] = useState<CanvasRenderingContext2D | null>(null);\r\n    // Called when a canvas is mounted\r\n    const callback = useCallback((canvas: HTMLCanvasElement) => {\r\n        if (canvas !== null) {\r\n            setCtx(canvas.getContext('2d'));\r\n        }\r\n    }, []);\r\n\r\n    return [ctx, callback];\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {useCanvasRefs} from \"./hooks\";\r\nimport {Viewport, GraphData} from \"./types\";\r\n\r\ntype GraphBackgroundProps = {\r\n    width: number,\r\n    height: number,\r\n    viewport: Viewport\r\n};\r\n\r\n// Pick the largest tick increment which is 1, 2, or 5 times a power of 10\r\nfunction getIncrement(minTicks: number, span: number): number {\r\n    const log = Math.log10(span / minTicks);\r\n\r\n    const pow10 = Math.pow(10, Math.floor(log));\r\n    const div = span / (pow10 * minTicks);\r\n\r\n    if (div > 5) return pow10 * 5;\r\n    if (div > 2) return pow10 * 2;\r\n    return pow10;\r\n}\r\n\r\nfunction getIncrements(viewport: Viewport, width: number, height: number): GraphData {\r\n    const minTicks: number = 14;\r\n\r\n    //const worldIncrements = {dx: getIncrement(minTicks, xSpan), dy: getIncrement(minTicks, ySpan)};]\r\n    const span = Math.max(viewport.x.extent, viewport.y.extent);\r\n    const inc = getIncrement(minTicks, span);\r\n    const worldIncrements = {dx: inc, dy: inc};\r\n    const deviceDX = width / (viewport.x.extent / worldIncrements.dx);\r\n    const deviceDY = height / (viewport.y.extent / worldIncrements.dy);\r\n    const deviceIncrements = {dx: deviceDX, dy: deviceDY};\r\n\r\n    // First tick is usually not exactly at the baseline\r\n    let xOffset = Math.abs(viewport.x.min) % inc;\r\n    let yOffset = Math.abs(viewport.y.min) % inc;\r\n\r\n    xOffset = viewport.x.min > 0 ? -xOffset : xOffset;\r\n    yOffset = viewport.y.min > 0 ? -yOffset : yOffset;\r\n\r\n    // First tick is at min + offset\r\n    const worldStarts = {x: xOffset + viewport.x.min, y: yOffset + viewport.y.min};\r\n    const deviceStarts = {x: xOffset / viewport.x.extent * width, y: yOffset / viewport.y.extent * height};\r\n\r\n    return {worldStarts, deviceStarts, worldIncrements, deviceIncrements};\r\n}\r\n\r\n// Format the number, chop off rounding errors, etc\r\n// TODO: find complete solution that dodges floating point issues; as this one fails due to rounding and at certain sizes\r\n// Possibility: store the increment as an int, multiply by tick amount, then manually add zeroes on either side\r\nfunction formatNumber(n: number): string {\r\n    return (Math.round(n * 1000) / 1000).toString();\r\n}\r\n\r\nfunction drawAxisLabel(ctx: CanvasRenderingContext2D, label: string, x: number, y: number, offsetX: boolean): void {\r\n    const m: TextMetrics = ctx.measureText(label);\r\n    if(offsetX) x += m.width / 2;\r\n    ctx.fillStyle = 'white';\r\n    ctx.fillRect(x - m.width / 2, y - 8, m.width, 16);\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillText(label, x, y);\r\n}\r\n\r\nfunction drawGraph(ctx: CanvasRenderingContext2D, width: number, height: number, data: GraphData) {\r\n    if (ctx === null) return;\r\n\r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.strokeStyle = 'gray';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.textAlign = 'center';\r\n    ctx.font = '16px monospace';\r\n\r\n    // Do Y axis first so the horizontal gridlines get cleared properly by drawAxisLabel\r\n    // TODO: figure out better solution for labeling\r\n    let labelY = data.worldStarts.y;\r\n    let halfInc = data.worldIncrements.dy / 2;\r\n    for (let y = height - data.deviceStarts.y; y >= 0; y -= data.deviceIncrements.dy) {\r\n        if (labelY + halfInc > 0 && labelY - halfInc < 0) {\r\n            ctx.strokeStyle = 'black';\r\n            ctx.strokeRect(0, y, width, 0.8);\r\n            ctx.strokeStyle = 'gray';\r\n        } else {\r\n            ctx.strokeRect(0, y, width, 0.1);\r\n        }\r\n\r\n        drawAxisLabel(ctx, formatNumber(labelY), 0, y, true);\r\n        labelY += data.worldIncrements.dy;\r\n    }\r\n\r\n    let labelX = data.worldStarts.x;\r\n    halfInc = data.worldIncrements.dx / 2;\r\n    for (let x = data.deviceStarts.x; x < width; x += data.deviceIncrements.dx) {\r\n        if (labelX + halfInc > 0 && labelX - halfInc < 0) {\r\n            ctx.strokeStyle = 'black';\r\n            ctx.strokeRect(x, 0, 0.8, height);\r\n            ctx.strokeStyle = 'gray';\r\n        } else {\r\n            ctx.strokeRect(x, 0, 0.1, height);\r\n        }\r\n\r\n        drawAxisLabel(ctx, formatNumber(labelX), x, 10, false);\r\n        labelX += data.worldIncrements.dx;\r\n    }\r\n}\r\n\r\nconst GridCanvas: React.FC<GraphBackgroundProps> = (props: GraphBackgroundProps) => {\r\n    const [ctx, canvasRef] = useCanvasRefs();\r\n    const increments = getIncrements(props.viewport, props.width, props.height);\r\n\r\n    useEffect(() => {\r\n        if (ctx === null) return;\r\n        drawGraph(ctx, props.width, props.height, increments);\r\n    }, [ctx, props, increments]);\r\n\r\n    return <canvas\r\n        ref={canvasRef}\r\n        width={props.width}\r\n        height={props.height}\r\n        className='fixed layer-bottom'\r\n    />\r\n};\r\n\r\nexport default GridCanvas;","import React, {useEffect} from 'react';\r\nimport {Point} from \"./Point\";\r\nimport {useCanvasRefs} from \"./hooks\";\r\nimport {drawLine, drawPoint} from './Draw';\r\nimport {LineStyle} from \"./types\";\r\n\r\ntype PlotCanvasProps = {\r\n    width: number,\r\n    height: number,\r\n    points: Point[],\r\n    activePoint: number | undefined,\r\n    lineType: LineStyle,\r\n    isCycle: boolean\r\n};\r\n\r\nconst PlotCanvas: React.FC<PlotCanvasProps> = (props: PlotCanvasProps) => {\r\n    const [ctx, canvasRef] = useCanvasRefs();\r\n\r\n    useEffect(() => {\r\n        if (ctx === null) return;\r\n\r\n        ctx.clearRect(0, 0, props.width, props.height);\r\n        drawLine(ctx, props.points, props.lineType, props.isCycle);\r\n        props.points.forEach((point, index) => {\r\n            let style: string;\r\n            if (index === props.activePoint) {\r\n                style = 'red';\r\n            } else {\r\n                style = 'blue';\r\n            }\r\n\r\n            drawPoint(ctx, point, style);\r\n        });\r\n    }, [ctx, props]);\r\n\r\n    return <canvas\r\n        ref={canvasRef}\r\n        width={props.width}\r\n        height={props.height}\r\n        className='fixed layer-middle'\r\n    />\r\n};\r\n\r\nexport default PlotCanvas;","import React, {ReactNode} from 'react';\r\nimport './Modal.css';\r\n\r\ntype Props = {\r\n    title: string,\r\n    show: boolean,\r\n    children: ReactNode,\r\n    handleClose: () => void\r\n}\r\n\r\nconst Modal: React.FC<Props> = (props: Props) => {\r\n    const showHideClassName = props.show ? 'Modal-show' : 'Modal-hide';\r\n    return (\r\n        <div className={'Modal ' + showHideClassName}>\r\n            <div className='ui-box Modal-box'>\r\n                <h1 className='Modal-header'>{props.title}</h1>\r\n                {props.children}\r\n                <button\r\n                    className='Modal-close-button'\r\n                    onClick={props.handleClose}\r\n                >Close</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {Point, distance, pointToString} from './Point';\r\nimport {radius} from './Draw';\r\nimport GridCanvas from './GridCanvas';\r\nimport PlotCanvas from './PlotCanvas';\r\nimport {Dimensions, LineStyle, Viewport} from \"./types\";\r\nimport Modal from \"./Modal\";\r\n\r\nfunction getRegularViewport(min: number, max: number, windowX: number, windowY: number): Viewport {\r\n    let ratioX: number = 1;\r\n    let ratioY: number = 1;\r\n    if (windowX > windowY) {\r\n        ratioY = windowY / windowX;\r\n    } else {\r\n        ratioX = windowX / windowY;\r\n    }\r\n\r\n    const xMin = min * ratioX;\r\n    const xMax = max * ratioX;\r\n    const yMin = min * ratioY;\r\n    const yMax = max * ratioY;\r\n\r\n    return {\r\n        x: {min: xMin, max: xMax, extent: xMax - xMin},\r\n        y: {min: yMin, max: yMax, extent: yMax - yMin}\r\n    };\r\n}\r\n\r\nfunction getDefaultViewport(windowX: number, windowY: number): Viewport {\r\n    return getRegularViewport(-10.5, 10.5, windowX, windowY);\r\n}\r\n\r\nfunction scaleViewport(v: Viewport, ratio: number) {\r\n    const newXExtent = v.x.extent * ratio;\r\n    const newYExtent = v.y.extent * ratio;\r\n    const newXMin = (v.x.extent - newXExtent) / 2 + v.x.min;\r\n    const newYMin = (v.y.extent - newYExtent) / 2 + v.y.min;\r\n\r\n    return {\r\n        x: {min: newXMin, max: newXMin + newXExtent, extent: newXExtent},\r\n        y: {min: newYMin, max: newYMin + newYExtent, extent: newYExtent}\r\n    };\r\n}\r\n\r\nfunction exportString(points: Point[]): string {\r\n    if(points.length === 0) return '[]';\r\n\r\n    let str = '[' + pointToString(points[0]);\r\n    for(let i = 1; i < points.length; i++) {\r\n        str += ',' + pointToString(points[i]);\r\n    }\r\n\r\n   return str + ']';\r\n}\r\n\r\n// TODO: rewrite this monstrosity (it was fun though)\r\nfunction importFromString(str: string): Point[] {\r\n    type partialPointList = {x: undefined | number, points: Point[]};\r\n    const startList : partialPointList = {x: undefined, points: []};\r\n    return str.replace(/[^\\d.,-]/gi, '')\r\n        .split(',')\r\n        .map(str => Number.parseFloat(str))\r\n        .reduce((acc, curr) => {\r\n            if(acc.x !== undefined) {\r\n                acc.points.push({x: acc.x, y: curr});\r\n                acc.x = undefined;\r\n            } else {\r\n                acc.x = curr;\r\n            }\r\n            return acc;\r\n        }, startList).points;\r\n}\r\n\r\n// TODO: Hew the monolith! This component is too complex\r\nconst Graph: React.FC<Dimensions> = (props: Dimensions) => {\r\n    const [activePoint, setActivePoint] = useState<number | undefined>(undefined);\r\n    const [ptrDown, setPtrDown] = useState<boolean>(false);\r\n    const [worldPoints, setWorldPoints] = useState<Point[]>([]);\r\n    const [devicePoints, setDevicePoints] = useState<Point[]>([]);\r\n    const [viewport, setViewport] = useState<Viewport>(getDefaultViewport(props.width, props.height));\r\n    const [lineStyle, setLineStyle] = useState<LineStyle>('spline');\r\n    const [isCycle, setIsCycle] = useState<boolean>(false);\r\n    const [showExport, setShowExport] = useState<boolean>(false);\r\n    const [showImport, setShowImport] = useState<boolean>(false);\r\n\r\n    // We store world coordinates and convert back to device coordinates to display\r\n    function toWorld(point: Point): Point {\r\n        return {\r\n            x: point.x / props.width * viewport.x.extent + viewport.x.min,\r\n            y: (props.height - point.y) / props.height * viewport.y.extent + viewport.y.min\r\n        };\r\n    }\r\n\r\n    // We wrap toDevice conversion with useCallback so that the useEffect below has static dependencies\r\n    const toDevice = useCallback((point: Point) => {\r\n        return {\r\n            x: Math.round((point.x - viewport.x.min) / viewport.x.extent * props.width),\r\n            y: Math.round(props.height - ((point.y - viewport.y.min) / viewport.y.extent * props.height))\r\n        };\r\n    }, [props.width, props.height, viewport]);\r\n\r\n    // When worldPoints changes, update devicePoints to trigger a redraw\r\n    useEffect(() => {\r\n        setDevicePoints(worldPoints.map(toDevice));\r\n    }, [toDevice, worldPoints]);\r\n\r\n    function clearPoints() {\r\n        setWorldPoints([]);\r\n        setActivePoint(undefined);\r\n    }\r\n\r\n    function handlePointerDown(e: React.PointerEvent) {\r\n        // Set the active point\r\n        // New active point should be the one closest to click, but only if a point is close enough\r\n        let min: number = radius;\r\n        const clicked: Point = {x: e.clientX, y: e.clientY};\r\n        let newActivePoint: number | undefined = undefined;\r\n        devicePoints.forEach((loc, index) => {\r\n            const dist = distance(clicked, loc);\r\n            if (dist < min) {\r\n                newActivePoint = index;\r\n                min = dist;\r\n            }\r\n        });\r\n\r\n        if (activePoint !== newActivePoint) {\r\n            setActivePoint(newActivePoint);\r\n        }\r\n\r\n        setPtrDown(true);\r\n    }\r\n\r\n    function handlePointerMove(e: React.PointerEvent) {\r\n        if (!ptrDown) return;\r\n\r\n        // Prevents undesired drag behavior on Chrome\r\n        e.preventDefault();\r\n\r\n        if (activePoint === undefined) { // Pan the graph\r\n            const xRatio = e.movementX / props.width;\r\n            const dx = (viewport.x.max - viewport.x.min) * xRatio;\r\n            const xMin = viewport.x.min - dx;\r\n            const xMax = viewport.x.max - dx;\r\n\r\n            const yRatio = e.movementY / props.height;\r\n            const dy = (viewport.y.max - viewport.y.min) * yRatio;\r\n            const yMin = viewport.y.min + dy;\r\n            const yMax = viewport.y.max + dy;\r\n\r\n            setViewport({\r\n                x: {min: xMin, max: xMax, extent: xMax - xMin},\r\n                y: {min: yMin, max: yMax, extent: yMax - yMin}\r\n            });\r\n        } else { // Move the point\r\n            // TODO: optimization: use reducer for points since useState does not merge lists\r\n            const clickedPoint = {x: e.clientX, y: e.clientY};\r\n            const newWorld = worldPoints.slice();\r\n            newWorld[activePoint] = toWorld(clickedPoint);\r\n\r\n            setWorldPoints(newWorld);\r\n        }\r\n    }\r\n\r\n    function handlePointerUp(e: React.PointerEvent) {\r\n        setPtrDown(false);\r\n    }\r\n\r\n    function handleDoubleClick(e: React.MouseEvent) {\r\n        const newDevicePoint: Point = {x: e.clientX, y: e.clientY};\r\n        setActivePoint(worldPoints.length);\r\n        setWorldPoints([...worldPoints, toWorld(newDevicePoint)]);\r\n    }\r\n\r\n    function handleWheel(e: React.WheelEvent) {\r\n        if (e.deltaY === 0) return;\r\n\r\n        if (e.deltaY > 0) { // Scroll down: zoom out\r\n            setViewport(scaleViewport(viewport, 1.2));\r\n        } else { // Scroll up: zoom in\r\n            setViewport(scaleViewport(viewport, 0.8));\r\n        }\r\n    }\r\n\r\n    function handleKeyDown(e: React.KeyboardEvent) {\r\n        switch (e.key) {\r\n            case 'd' || 'D': // Delete the active point\r\n                if (activePoint !== undefined) {\r\n                    devicePoints.splice(activePoint, 1);\r\n                    worldPoints.splice(activePoint, 1);\r\n                    setActivePoint(undefined);\r\n                    setWorldPoints(worldPoints);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // TODO: Extract modal contents to own components\r\n    return <>\r\n        <div\r\n            style={{\r\n                width: props.width,\r\n                height: props.height\r\n            }}\r\n            tabIndex={0} // So we can focus the div and get keyboard events\r\n            onPointerDown={handlePointerDown}\r\n            onPointerMove={handlePointerMove}\r\n            onPointerUp={handlePointerUp}\r\n            onDoubleClick={handleDoubleClick}\r\n            onWheel={handleWheel}\r\n            onKeyDown={handleKeyDown}\r\n            onBlur={() => {setActivePoint(undefined);}}\r\n            className='fixed layer-top'\r\n        />\r\n        <GridCanvas\r\n            width={props.width}\r\n            height={props.height}\r\n            viewport={viewport}\r\n        />\r\n        <PlotCanvas\r\n            width={props.width}\r\n            height={props.height}\r\n            points={devicePoints}\r\n            activePoint={activePoint}\r\n            lineType={lineStyle}\r\n            isCycle={isCycle}\r\n        />\r\n        <div\r\n            id='controls'\r\n            className='ui-box layer-control'\r\n        >\r\n            <button\r\n                onClick={clearPoints}\r\n            >Clear</button>\r\n            <select\r\n                id='line-style'\r\n                onChange={e => {\r\n                    setLineStyle(e.target.value as LineStyle);\r\n                }}\r\n            >\r\n                <option value={'spline'}>Spline</option>\r\n                <option value={'bezier'}>Bezier</option>\r\n                <option value={'line'}>Line</option>\r\n                <option value={'plot'}>Plot</option>\r\n            </select>\r\n            <div>\r\n                <input type='checkbox'\r\n                       onChange={e => {\r\n                           setIsCycle(e.target.checked);\r\n                       }}\r\n                />\r\n                <label htmlFor='cycle'>Cycle</label>\r\n            </div>\r\n            <button onClick={() => {setShowExport(true)}}>Export</button>\r\n            <button onClick={() => {setShowImport(true)}}>Import</button>\r\n        </div>\r\n        <Modal\r\n            title='Export Points'\r\n            children={<textarea readOnly style={{resize:'none'}} value={exportString(worldPoints)} />}\r\n            show={showExport}\r\n            handleClose={() => {\r\n                setShowExport(false);\r\n            }}\r\n        />\r\n        <Modal\r\n            title='Import Points'\r\n            children={\r\n                <>\r\n                <textarea\r\n                    id='importText'\r\n                    style={{resize:'none'}} />\r\n                <button\r\n                    onClick={() => {\r\n                        const textArea = document.getElementById('importText') as HTMLTextAreaElement;\r\n                        const importStr = textArea.value;\r\n                        setWorldPoints(importFromString(importStr));\r\n                    }}\r\n                >Import</button>\r\n                </>\r\n            }\r\n            show={showImport}\r\n            handleClose={() => {\r\n                setShowImport(false);\r\n            }}\r\n        />\r\n    </>\r\n};\r\n\r\nexport default Graph;","import React from 'react';\nimport Graph from './Graph';\nimport './App.css';\n\ninterface WindowDimensions {\n    width: number;\n    height: number;\n}\n\nconst App: React.FC<WindowDimensions> = (props: WindowDimensions) => {\n    return (\n        <>\n            <Graph\n                width={props.width}\n                height={props.height}\n            />\n        </>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nfunction renderApp() {\n    ReactDOM.render(<App width={window.innerWidth} height={window.innerHeight} />, document.getElementById('root'));\n}\n\nwindow.addEventListener('resize', renderApp);\n\nrenderApp();\n"],"sourceRoot":""}